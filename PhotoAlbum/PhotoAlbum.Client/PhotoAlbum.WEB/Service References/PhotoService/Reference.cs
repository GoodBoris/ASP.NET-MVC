//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PhotoAlbum.WEB.PhotoService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhotoDescriptionDto", Namespace="http://schemas.datacontract.org/2004/07/Service.Messages.Photo")]
    [System.SerializableAttribute()]
    public partial class PhotoDescriptionDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AverageRatingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PhotoIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeOfCreationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AverageRating {
            get {
                return this.AverageRatingField;
            }
            set {
                if ((this.AverageRatingField.Equals(value) != true)) {
                    this.AverageRatingField = value;
                    this.RaisePropertyChanged("AverageRating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PhotoId {
            get {
                return this.PhotoIdField;
            }
            set {
                if ((this.PhotoIdField.Equals(value) != true)) {
                    this.PhotoIdField = value;
                    this.RaisePropertyChanged("PhotoId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeOfCreation {
            get {
                return this.TimeOfCreationField;
            }
            set {
                if ((this.TimeOfCreationField.Equals(value) != true)) {
                    this.TimeOfCreationField = value;
                    this.RaisePropertyChanged("TimeOfCreation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomExpMsg", Namespace="http://schemas.datacontract.org/2004/07/Service.Utilities.PhotoAlbum")]
    [System.SerializableAttribute()]
    public partial class CustomExpMsg : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMsgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorNumber {
            get {
                return this.ErrorNumberField;
            }
            set {
                if ((this.ErrorNumberField.Equals(value) != true)) {
                    this.ErrorNumberField = value;
                    this.RaisePropertyChanged("ErrorNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderBy", Namespace="http://schemas.datacontract.org/2004/07/PhotoAlbum.DAL.Utilities")]
    public enum OrderBy : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Raiting = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TimeOfCreation = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PhotoService.IPhotoAlbumService")]
    public interface IPhotoAlbumService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/CreatePhoto", ReplyAction="http://tempuri.org/IPhotoAlbumService/CreatePhotoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PhotoAlbum.WEB.PhotoService.CustomExpMsg), Action="http://tempuri.org/IPhotoAlbumService/CreatePhotoCustomExpMsgFault", Name="CustomExpMsg", Namespace="http://schemas.datacontract.org/2004/07/Service.Utilities.PhotoAlbum")]
        System.Guid CreatePhoto(PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto photoDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/CreatePhoto", ReplyAction="http://tempuri.org/IPhotoAlbumService/CreatePhotoResponse")]
        System.Threading.Tasks.Task<System.Guid> CreatePhotoAsync(PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto photoDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/DeletePhoto", ReplyAction="http://tempuri.org/IPhotoAlbumService/DeletePhotoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PhotoAlbum.WEB.PhotoService.CustomExpMsg), Action="http://tempuri.org/IPhotoAlbumService/DeletePhotoCustomExpMsgFault", Name="CustomExpMsg", Namespace="http://schemas.datacontract.org/2004/07/Service.Utilities.PhotoAlbum")]
        System.Guid DeletePhoto(System.Guid photoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/DeletePhoto", ReplyAction="http://tempuri.org/IPhotoAlbumService/DeletePhotoResponse")]
        System.Threading.Tasks.Task<System.Guid> DeletePhotoAsync(System.Guid photoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/UpdatePhoto", ReplyAction="http://tempuri.org/IPhotoAlbumService/UpdatePhotoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PhotoAlbum.WEB.PhotoService.CustomExpMsg), Action="http://tempuri.org/IPhotoAlbumService/UpdatePhotoCustomExpMsgFault", Name="CustomExpMsg", Namespace="http://schemas.datacontract.org/2004/07/Service.Utilities.PhotoAlbum")]
        System.Guid UpdatePhoto(PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto photoDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/UpdatePhoto", ReplyAction="http://tempuri.org/IPhotoAlbumService/UpdatePhotoResponse")]
        System.Threading.Tasks.Task<System.Guid> UpdatePhotoAsync(PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto photoDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/AddVote", ReplyAction="http://tempuri.org/IPhotoAlbumService/AddVoteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PhotoAlbum.WEB.PhotoService.CustomExpMsg), Action="http://tempuri.org/IPhotoAlbumService/AddVoteCustomExpMsgFault", Name="CustomExpMsg", Namespace="http://schemas.datacontract.org/2004/07/Service.Utilities.PhotoAlbum")]
        float AddVote(System.Guid photoId, float vote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/AddVote", ReplyAction="http://tempuri.org/IPhotoAlbumService/AddVoteResponse")]
        System.Threading.Tasks.Task<float> AddVoteAsync(System.Guid photoId, float vote);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/CountPhotosById", ReplyAction="http://tempuri.org/IPhotoAlbumService/CountPhotosByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PhotoAlbum.WEB.PhotoService.CustomExpMsg), Action="http://tempuri.org/IPhotoAlbumService/CountPhotosByIdCustomExpMsgFault", Name="CustomExpMsg", Namespace="http://schemas.datacontract.org/2004/07/Service.Utilities.PhotoAlbum")]
        int CountPhotosById(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/CountPhotosById", ReplyAction="http://tempuri.org/IPhotoAlbumService/CountPhotosByIdResponse")]
        System.Threading.Tasks.Task<int> CountPhotosByIdAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/CountPhotosByUserName", ReplyAction="http://tempuri.org/IPhotoAlbumService/CountPhotosByUserNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PhotoAlbum.WEB.PhotoService.CustomExpMsg), Action="http://tempuri.org/IPhotoAlbumService/CountPhotosByUserNameCustomExpMsgFault", Name="CustomExpMsg", Namespace="http://schemas.datacontract.org/2004/07/Service.Utilities.PhotoAlbum")]
        int CountPhotosByUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/CountPhotosByUserName", ReplyAction="http://tempuri.org/IPhotoAlbumService/CountPhotosByUserNameResponse")]
        System.Threading.Tasks.Task<int> CountPhotosByUserNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/GetPhotosByOrder", ReplyAction="http://tempuri.org/IPhotoAlbumService/GetPhotosByOrderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PhotoAlbum.WEB.PhotoService.CustomExpMsg), Action="http://tempuri.org/IPhotoAlbumService/GetPhotosByOrderCustomExpMsgFault", Name="CustomExpMsg", Namespace="http://schemas.datacontract.org/2004/07/Service.Utilities.PhotoAlbum")]
        PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto[] GetPhotosByOrder(int currentPage, int pageSize, string userName, PhotoAlbum.WEB.PhotoService.OrderBy orderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/GetPhotosByOrder", ReplyAction="http://tempuri.org/IPhotoAlbumService/GetPhotosByOrderResponse")]
        System.Threading.Tasks.Task<PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto[]> GetPhotosByOrderAsync(int currentPage, int pageSize, string userName, PhotoAlbum.WEB.PhotoService.OrderBy orderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/GetPhotosByDefaultOrder", ReplyAction="http://tempuri.org/IPhotoAlbumService/GetPhotosByDefaultOrderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PhotoAlbum.WEB.PhotoService.CustomExpMsg), Action="http://tempuri.org/IPhotoAlbumService/GetPhotosByDefaultOrderCustomExpMsgFault", Name="CustomExpMsg", Namespace="http://schemas.datacontract.org/2004/07/Service.Utilities.PhotoAlbum")]
        PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto[] GetPhotosByDefaultOrder(int currentPage, int pageSize, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/GetPhotosByDefaultOrder", ReplyAction="http://tempuri.org/IPhotoAlbumService/GetPhotosByDefaultOrderResponse")]
        System.Threading.Tasks.Task<PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto[]> GetPhotosByDefaultOrderAsync(int currentPage, int pageSize, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/FindPhotoById", ReplyAction="http://tempuri.org/IPhotoAlbumService/FindPhotoByIdResponse")]
        PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto FindPhotoById(System.Guid photoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoAlbumService/FindPhotoById", ReplyAction="http://tempuri.org/IPhotoAlbumService/FindPhotoByIdResponse")]
        System.Threading.Tasks.Task<PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto> FindPhotoByIdAsync(System.Guid photoId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhotoAlbumServiceChannel : PhotoAlbum.WEB.PhotoService.IPhotoAlbumService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhotoAlbumServiceClient : System.ServiceModel.ClientBase<PhotoAlbum.WEB.PhotoService.IPhotoAlbumService>, PhotoAlbum.WEB.PhotoService.IPhotoAlbumService {
        
        public PhotoAlbumServiceClient() {
        }
        
        public PhotoAlbumServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhotoAlbumServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhotoAlbumServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhotoAlbumServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid CreatePhoto(PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto photoDescription) {
            return base.Channel.CreatePhoto(photoDescription);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreatePhotoAsync(PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto photoDescription) {
            return base.Channel.CreatePhotoAsync(photoDescription);
        }
        
        public System.Guid DeletePhoto(System.Guid photoId) {
            return base.Channel.DeletePhoto(photoId);
        }
        
        public System.Threading.Tasks.Task<System.Guid> DeletePhotoAsync(System.Guid photoId) {
            return base.Channel.DeletePhotoAsync(photoId);
        }
        
        public System.Guid UpdatePhoto(PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto photoDescription) {
            return base.Channel.UpdatePhoto(photoDescription);
        }
        
        public System.Threading.Tasks.Task<System.Guid> UpdatePhotoAsync(PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto photoDescription) {
            return base.Channel.UpdatePhotoAsync(photoDescription);
        }
        
        public float AddVote(System.Guid photoId, float vote) {
            return base.Channel.AddVote(photoId, vote);
        }
        
        public System.Threading.Tasks.Task<float> AddVoteAsync(System.Guid photoId, float vote) {
            return base.Channel.AddVoteAsync(photoId, vote);
        }
        
        public int CountPhotosById(string userId) {
            return base.Channel.CountPhotosById(userId);
        }
        
        public System.Threading.Tasks.Task<int> CountPhotosByIdAsync(string userId) {
            return base.Channel.CountPhotosByIdAsync(userId);
        }
        
        public int CountPhotosByUserName(string userName) {
            return base.Channel.CountPhotosByUserName(userName);
        }
        
        public System.Threading.Tasks.Task<int> CountPhotosByUserNameAsync(string userName) {
            return base.Channel.CountPhotosByUserNameAsync(userName);
        }
        
        public PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto[] GetPhotosByOrder(int currentPage, int pageSize, string userName, PhotoAlbum.WEB.PhotoService.OrderBy orderBy) {
            return base.Channel.GetPhotosByOrder(currentPage, pageSize, userName, orderBy);
        }
        
        public System.Threading.Tasks.Task<PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto[]> GetPhotosByOrderAsync(int currentPage, int pageSize, string userName, PhotoAlbum.WEB.PhotoService.OrderBy orderBy) {
            return base.Channel.GetPhotosByOrderAsync(currentPage, pageSize, userName, orderBy);
        }
        
        public PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto[] GetPhotosByDefaultOrder(int currentPage, int pageSize, string userName) {
            return base.Channel.GetPhotosByDefaultOrder(currentPage, pageSize, userName);
        }
        
        public System.Threading.Tasks.Task<PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto[]> GetPhotosByDefaultOrderAsync(int currentPage, int pageSize, string userName) {
            return base.Channel.GetPhotosByDefaultOrderAsync(currentPage, pageSize, userName);
        }
        
        public PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto FindPhotoById(System.Guid photoId) {
            return base.Channel.FindPhotoById(photoId);
        }
        
        public System.Threading.Tasks.Task<PhotoAlbum.WEB.PhotoService.PhotoDescriptionDto> FindPhotoByIdAsync(System.Guid photoId) {
            return base.Channel.FindPhotoByIdAsync(photoId);
        }
    }
}
